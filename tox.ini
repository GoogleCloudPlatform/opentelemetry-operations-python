[tox]
skipsdist = True
skip_missing_interpreters = True
envlist =
  ; Add the `ci` factor to any env that should be running during CI.
  py3{4,5,6,7,8}-ci-test-exporter-cloud-monitoring
  py3{4,5,6,7,8}-ci-test-exporter-cloud-trace

  ; These are development commands and use the same virtualenv.
  dev
  docs
  fix
  lint

  ; same as dev factors, but includes "ci" factor and uses clean virtualenv
  {docs,lint}-ci

; this section contains constants that can be referenced elsewhere
[constants]

base_deps =
  -c dev-constraints.txt
  opentelemetry-api
  opentelemetry-sdk

dev_basepython = python3.8
dev_deps =
  {[constants]base_deps}
  black
  flake8
  isort
  pylint
  -e {toxinidir}/opentelemetry-exporter-cloud-monitoring
  -e {toxinidir}/opentelemetry-exporter-cloud-trace

lint_commands =
  black . --diff --check
  isort --recursive . --diff --check-only
  flake8 .
  bash -c "pylint $(find . -regex '\.\/opentelemetry\-.*\.pyi?$')"

docs_deps =
  -r docs-requirements.txt
docs_commands = make -C docs/ clean html


[testenv]
download = true
deps =
  {[constants]base_deps}
  test: pytest

changedir =
  test-exporter-monitoring: opentelemetry-exporter-cloud-monitoring
  test-exporter-trace: opentelemetry-exporter-cloud-trace

commands_pre =
  test: pip install .
  test: {toxinidir}/get_mock_server.sh {envbindir}

commands =
  ; use subshell to allow using tox envars in substitution
  test: bash -c 'pytest {posargs}'

whitelist_externals = bash

; dev, lint, and env all use the same virtualenv. To (re)create the virtualenv
; for development, run `tox -e dev`. To run fixers (black, isort) `tox -e fix`.
; Lint is run as part of CI as well, so uses a separate.
[testenv:{dev,fix,lint,docs}]
basepython = {[constants]dev_basepython}
envdir = venv

deps =
  {[constants]dev_deps}
  {[constants]docs_deps}

commands =
  docs: {[constants]docs_commands}
  fix: black .
  fix: isort --recursive .
  lint: {[constants]lint_commands}

whitelist_externals =
  make
  bash

[testenv:{docs,lint}-ci]
basepython = {[constants]dev_basepython}
deps =
  {[constants]dev_deps}
  docs: {[constants]docs_deps}

commands =
  docs: {[constants]docs_commands}
  lint: {[constants]lint_commands}

whitelist_externals =
  make
  bash

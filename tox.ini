[tox]
skipsdist = True
skip_missing_interpreters = True
envlist =
  ; Add the `ci` factor to any env that should be running during CI.
  py3{5,6,7,8}-ci-test-{exporter,tools}
  {lint,mypy}-ci-{exporter,tools}
  docs-ci

  ; These are development commands and share the same virtualenv *within the
  ; package root directory* e.g. opentelemetry-tools-google-cloud/venv
  {dev,fix}-{exporter,tools}

; this section contains constants that can be referenced elsewhere
[constants]

base_deps =
  -c {toxinidir}/dev-constraints.txt
  -e {toxinidir}/test-common

dev_basepython = python3.8
dev_deps =
  {[constants]base_deps}
  black
  flake8
  isort
  pylint
  mypy

; CircleCI won't show results if I put them in .test-results directly
test_results_dir = {toxinidir}/.test-results/test-results

lint_commands =
  black . --diff --check
  isort --recursive . --diff --check-only
  flake8 --config {toxinidir}/.flake8 .
  bash -c "pylint --rcfile {toxinidir}/.pylintrc $(find . -regex '\.\/opentelemetry\-.*\.pyi?$')"


mypy_args = src/ --pretty --show-error-codes {posargs}

mypy_commands =
    bash -c 'cd {toxinidir}/opentelemetry-exporter-google-cloud && \
        mypy {[constants]mypy_args} \
        --junit-xml {[constants]test_results_dir}/mypy-exporter/junit.xml'
    bash -c 'cd {toxinidir}/opentelemetry-tools-google-cloud && \
        mypy {[constants]mypy_args} \
        --junit-xml {[constants]test_results_dir}/mypy-tools/junit.xml'

[testenv]
download = true
deps =
  test: {[constants]base_deps}
  test: pytest
setenv =
  exporter: PACKAGE_NAME = opentelemetry-exporter-google-cloud
  tools: PACKAGE_NAME = opentelemetry-tools-google-cloud
changedir =
  test: {env:PACKAGE_NAME}

passenv = SKIP_GET_MOCK_SERVER

commands_pre =
  test: pip install .
  test: {toxinidir}/get_mock_server.sh {envbindir}

commands =
  test: pytest --junitxml={[constants]test_results_dir}/{envname}/junit.xml {posargs}

whitelist_externals = bash

[testenv:{lint,mypy}-ci-{exporter,tools}]
download = true
basepython = {[constants]dev_basepython}
deps =
  {[constants]dev_deps}
  docs: {[constants]docs_deps}
setenv =
  exporter: PACKAGE_NAME = opentelemetry-exporter-google-cloud
  tools: PACKAGE_NAME = opentelemetry-tools-google-cloud
changedir = {env:PACKAGE_NAME}

commands_pre =
  pip install .

commands =
  lint: black . --diff --check
  lint: isort --recursive . --diff --check-only
  lint: flake8 --config {toxinidir}/.flake8 .
  lint: pylint --rcfile {toxinidir}/.pylintrc src/ tests/

  mypy: mypy {[constants]mypy_args} --junit-xml {[constants]test_results_dir}/mypy-{env:PACKAGE_NAME}/junit.xml

; TODO: add docs venv
[testenv:docs-ci]
deps =
  -r docs-requirements.txt

commands =
  make -C docs/ clean html

whitelist_externals =
  make
  bash

; dev/fix use the same virtualenv. To (re)create the virtualenv
; for development, run `tox -e dev`. To run fixers (black, isort) `tox -e fix`.
[testenv:{dev,fix}-{exporter,tools}]
download = true
basepython = {[constants]dev_basepython}
envdir =
  exporter: opentelemetry-exporter-google-cloud/venv
  tools: opentelemetry-tools-google-cloud/venv
deps =
  {[constants]dev_deps}
  -e {env:PACKAGE_NAME}

setenv =
  exporter: PACKAGE_NAME = opentelemetry-exporter-google-cloud
  tools: PACKAGE_NAME = opentelemetry-tools-google-cloud

changedir = {env:PACKAGE_NAME}

commands =
  fix: black .
  fix: isort --recursive .
